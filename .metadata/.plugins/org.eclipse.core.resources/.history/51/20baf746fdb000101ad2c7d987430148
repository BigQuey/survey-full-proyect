package com.example.demo.services;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.demo.dto.LoginRequest;
import com.example.demo.dto.RegisterRequest;
import com.example.demo.entity.User;
import com.example.demo.repository.UserRepository;

import lombok.RequiredArgsConstructor;

@Service

public class AuthService {
	private final UserRepository userRepository;
	private final JwtService jwtService;
	private final  PasswordEncoder passwordEncoder;
	
	public AuthService(UserRepository userRepository, JwtService jwtService, PasswordEncoder passwordEncoder) {
	    this.userRepository = userRepository;
	    this.jwtService = jwtService;
	    this.passwordEncoder = passwordEncoder;
	}
	public String register(RegisterRequest request) {
		if (userRepository.existsByUsername(request.getUsername())) {
			throw new RuntimeException("El usuario ya existe");
		}

		User user = new User();
		user.setName(request.getUsername());
		user.setPassword(passwordEncoder.encode(request.getPassword()));
		user.setRole(request.getRole());
		userRepository.save(user);

		return jwtService.generateToken(user.getName(), user.getRole());
	}

	public String login(LoginRequest request) {
		User user = userRepository.findByUsername(request.getUsername())
				.orElseThrow(() -> new RuntimeException("Usuario no encontrado"));

		if (!passwordEncoder.matches(request.getPassword(), user.getPassword())) {
			throw new RuntimeException("Contrase√±a incorrecta");
		}

		return jwtService.generateToken(user.getName(), user.getRole());
	}
}
